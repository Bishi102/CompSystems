// Mult.vm
// Calculates a = x * y
// a is a local variable
// x & y are static variables

// Initialize loop counter, ncounter, and mult to 0
    push constant 1
    pop static 2 // loop counter
    push constant 0 
    pop static 3 // ncounter
    push constant 0
    pop static 4 // mult

    push static 0
    pop static 5 // save original x to static 5
    push static 1
    pop static 6 // save original y to static 6

// Negate negatives and increment ncounter
    push static 0
    push constant 0
    lt
    if-goto X_NEG
    goto CHECK_Y

label X_NEG
    push static 0
    neg
    pop static 0
    push static 3
    push constant 1
    add
    pop static 3

label CHECK_Y
    push static 1
    push constant 0
    lt
    if-goto Y_NEG

    goto FIND_SMALLER

label Y_NEG
    push static 1
    neg
    pop static 1
    push static 3
    push constant 1
    add
    pop static 3

label FIND_SMALLER
// Find smaller and larger values
    push static 0
    push static 1
    lt
    if-goto LOOP

// Swap x and y if x is greater than y
    push static 0
    push static 1
    pop static 0
    pop static 1

label LOOP
// Multiply x and y, ensuring loop iteration is done by smaller of x,y
    push static 2
    push static 0
    gt
    if-goto LOOPEND

    push static 4
    push static 1
    add 
    pop static 4

    push static 2
    push constant 1
    add
    pop static 2

    goto LOOP

label LOOPEND
    push static 3
    push constant 1
    and
    push constant 1
    eq
    if-goto NEGATE_RESULT

    goto DONE


label NEGATE_RESULT
    push static 4
    neg
    pop static 4

label DONE

    push static 5
    pop static 0 // restore original x from static 5
    push static 6
    pop static 1 // restore original y from static 6

    push static 4
    pop local 0

label END
    goto END
